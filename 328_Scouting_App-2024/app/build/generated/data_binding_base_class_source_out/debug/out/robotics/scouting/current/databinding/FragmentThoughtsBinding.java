// Generated by view binder compiler. Do not edit!
package robotics.scouting.current.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import robotics.scouting.current.R;

public final class FragmentThoughtsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Spinner bestDefenseSpinner;

  @NonNull
  public final Spinner bestOffenseSpinner;

  @NonNull
  public final Spinner defenseSpinner;

  @NonNull
  public final TextView header1;

  @NonNull
  public final TextView header2;

  @NonNull
  public final TextView header3;

  @NonNull
  public final TextView header4;

  @NonNull
  public final TextView header5;

  @NonNull
  public final TextView header6;

  @NonNull
  public final Spinner offenseSpinner;

  @NonNull
  public final Spinner worstDefenseSpinner;

  @NonNull
  public final Spinner worstOffenseSpinner;

  private FragmentThoughtsBinding(@NonNull ConstraintLayout rootView,
      @NonNull Spinner bestDefenseSpinner, @NonNull Spinner bestOffenseSpinner,
      @NonNull Spinner defenseSpinner, @NonNull TextView header1, @NonNull TextView header2,
      @NonNull TextView header3, @NonNull TextView header4, @NonNull TextView header5,
      @NonNull TextView header6, @NonNull Spinner offenseSpinner,
      @NonNull Spinner worstDefenseSpinner, @NonNull Spinner worstOffenseSpinner) {
    this.rootView = rootView;
    this.bestDefenseSpinner = bestDefenseSpinner;
    this.bestOffenseSpinner = bestOffenseSpinner;
    this.defenseSpinner = defenseSpinner;
    this.header1 = header1;
    this.header2 = header2;
    this.header3 = header3;
    this.header4 = header4;
    this.header5 = header5;
    this.header6 = header6;
    this.offenseSpinner = offenseSpinner;
    this.worstDefenseSpinner = worstDefenseSpinner;
    this.worstOffenseSpinner = worstOffenseSpinner;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentThoughtsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentThoughtsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_thoughts, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentThoughtsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bestDefenseSpinner;
      Spinner bestDefenseSpinner = ViewBindings.findChildViewById(rootView, id);
      if (bestDefenseSpinner == null) {
        break missingId;
      }

      id = R.id.bestOffenseSpinner;
      Spinner bestOffenseSpinner = ViewBindings.findChildViewById(rootView, id);
      if (bestOffenseSpinner == null) {
        break missingId;
      }

      id = R.id.defenseSpinner;
      Spinner defenseSpinner = ViewBindings.findChildViewById(rootView, id);
      if (defenseSpinner == null) {
        break missingId;
      }

      id = R.id.header1;
      TextView header1 = ViewBindings.findChildViewById(rootView, id);
      if (header1 == null) {
        break missingId;
      }

      id = R.id.header2;
      TextView header2 = ViewBindings.findChildViewById(rootView, id);
      if (header2 == null) {
        break missingId;
      }

      id = R.id.header3;
      TextView header3 = ViewBindings.findChildViewById(rootView, id);
      if (header3 == null) {
        break missingId;
      }

      id = R.id.header4;
      TextView header4 = ViewBindings.findChildViewById(rootView, id);
      if (header4 == null) {
        break missingId;
      }

      id = R.id.header5;
      TextView header5 = ViewBindings.findChildViewById(rootView, id);
      if (header5 == null) {
        break missingId;
      }

      id = R.id.header6;
      TextView header6 = ViewBindings.findChildViewById(rootView, id);
      if (header6 == null) {
        break missingId;
      }

      id = R.id.offenseSpinner;
      Spinner offenseSpinner = ViewBindings.findChildViewById(rootView, id);
      if (offenseSpinner == null) {
        break missingId;
      }

      id = R.id.worstDefenseSpinner;
      Spinner worstDefenseSpinner = ViewBindings.findChildViewById(rootView, id);
      if (worstDefenseSpinner == null) {
        break missingId;
      }

      id = R.id.worstOffenseSpinner;
      Spinner worstOffenseSpinner = ViewBindings.findChildViewById(rootView, id);
      if (worstOffenseSpinner == null) {
        break missingId;
      }

      return new FragmentThoughtsBinding((ConstraintLayout) rootView, bestDefenseSpinner,
          bestOffenseSpinner, defenseSpinner, header1, header2, header3, header4, header5, header6,
          offenseSpinner, worstDefenseSpinner, worstOffenseSpinner);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
