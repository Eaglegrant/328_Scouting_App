// Generated by view binder compiler. Do not edit!
package robotics.scouting.current.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import robotics.scouting.current.R;

public final class RecyclerItemGridBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView AutogridHeader;

  @NonNull
  public final TextView CAgridText;

  @NonNull
  public final TextView CTgridText;

  @NonNull
  public final TextView LAgridText;

  @NonNull
  public final TextView LTgridText;

  @NonNull
  public final TextView RAgridText;

  @NonNull
  public final TextView RTgridText;

  @NonNull
  public final TextView allianceText;

  @NonNull
  public final RelativeLayout autoGridLayout;

  @NonNull
  public final TextView autocHeader;

  @NonNull
  public final RelativeLayout autocLayout;

  @NonNull
  public final TextView autocText;

  @NonNull
  public final TextView defense2;

  @NonNull
  public final TextView defense3;

  @NonNull
  public final TextView dockHeader;

  @NonNull
  public final RelativeLayout dockLayout;

  @NonNull
  public final LinearLayout dockLayoutLinear;

  @NonNull
  public final TextView dockTimeHeader;

  @NonNull
  public final RelativeLayout dockTimeLayout;

  @NonNull
  public final LinearLayout dockTimeLayoutLinear;

  @NonNull
  public final TextView dockTimeText;

  @NonNull
  public final TextView dockingText;

  @NonNull
  public final TextView eventHeader;

  @NonNull
  public final RelativeLayout eventLayout;

  @NonNull
  public final TextView eventText;

  @NonNull
  public final LinearLayout layoutGrid1;

  @NonNull
  public final LinearLayout layoutGrid2;

  @NonNull
  public final TextView matchHeader;

  @NonNull
  public final RelativeLayout matchLayout;

  @NonNull
  public final TextView matchText;

  @NonNull
  public final TextView offence2;

  @NonNull
  public final TextView offence3;

  @NonNull
  public final TextView pointHeader;

  @NonNull
  public final RelativeLayout pointLayout;

  @NonNull
  public final TextView pointText;

  @NonNull
  public final TextView teamHeader;

  @NonNull
  public final RelativeLayout teamLayout;

  @NonNull
  public final LinearLayout teamLayoutTeams;

  @NonNull
  public final TextView teamNum2;

  @NonNull
  public final TextView teamNum3;

  @NonNull
  public final TextView teamText;

  @NonNull
  public final TextView teleGridHeader;

  @NonNull
  public final RelativeLayout teleGridLayout;

  @NonNull
  public final TextView teleHeader;

  @NonNull
  public final RelativeLayout teleopLayout;

  @NonNull
  public final TextView teleopText;

  private RecyclerItemGridBinding(@NonNull RelativeLayout rootView,
      @NonNull TextView AutogridHeader, @NonNull TextView CAgridText, @NonNull TextView CTgridText,
      @NonNull TextView LAgridText, @NonNull TextView LTgridText, @NonNull TextView RAgridText,
      @NonNull TextView RTgridText, @NonNull TextView allianceText,
      @NonNull RelativeLayout autoGridLayout, @NonNull TextView autocHeader,
      @NonNull RelativeLayout autocLayout, @NonNull TextView autocText, @NonNull TextView defense2,
      @NonNull TextView defense3, @NonNull TextView dockHeader, @NonNull RelativeLayout dockLayout,
      @NonNull LinearLayout dockLayoutLinear, @NonNull TextView dockTimeHeader,
      @NonNull RelativeLayout dockTimeLayout, @NonNull LinearLayout dockTimeLayoutLinear,
      @NonNull TextView dockTimeText, @NonNull TextView dockingText, @NonNull TextView eventHeader,
      @NonNull RelativeLayout eventLayout, @NonNull TextView eventText,
      @NonNull LinearLayout layoutGrid1, @NonNull LinearLayout layoutGrid2,
      @NonNull TextView matchHeader, @NonNull RelativeLayout matchLayout,
      @NonNull TextView matchText, @NonNull TextView offence2, @NonNull TextView offence3,
      @NonNull TextView pointHeader, @NonNull RelativeLayout pointLayout,
      @NonNull TextView pointText, @NonNull TextView teamHeader, @NonNull RelativeLayout teamLayout,
      @NonNull LinearLayout teamLayoutTeams, @NonNull TextView teamNum2, @NonNull TextView teamNum3,
      @NonNull TextView teamText, @NonNull TextView teleGridHeader,
      @NonNull RelativeLayout teleGridLayout, @NonNull TextView teleHeader,
      @NonNull RelativeLayout teleopLayout, @NonNull TextView teleopText) {
    this.rootView = rootView;
    this.AutogridHeader = AutogridHeader;
    this.CAgridText = CAgridText;
    this.CTgridText = CTgridText;
    this.LAgridText = LAgridText;
    this.LTgridText = LTgridText;
    this.RAgridText = RAgridText;
    this.RTgridText = RTgridText;
    this.allianceText = allianceText;
    this.autoGridLayout = autoGridLayout;
    this.autocHeader = autocHeader;
    this.autocLayout = autocLayout;
    this.autocText = autocText;
    this.defense2 = defense2;
    this.defense3 = defense3;
    this.dockHeader = dockHeader;
    this.dockLayout = dockLayout;
    this.dockLayoutLinear = dockLayoutLinear;
    this.dockTimeHeader = dockTimeHeader;
    this.dockTimeLayout = dockTimeLayout;
    this.dockTimeLayoutLinear = dockTimeLayoutLinear;
    this.dockTimeText = dockTimeText;
    this.dockingText = dockingText;
    this.eventHeader = eventHeader;
    this.eventLayout = eventLayout;
    this.eventText = eventText;
    this.layoutGrid1 = layoutGrid1;
    this.layoutGrid2 = layoutGrid2;
    this.matchHeader = matchHeader;
    this.matchLayout = matchLayout;
    this.matchText = matchText;
    this.offence2 = offence2;
    this.offence3 = offence3;
    this.pointHeader = pointHeader;
    this.pointLayout = pointLayout;
    this.pointText = pointText;
    this.teamHeader = teamHeader;
    this.teamLayout = teamLayout;
    this.teamLayoutTeams = teamLayoutTeams;
    this.teamNum2 = teamNum2;
    this.teamNum3 = teamNum3;
    this.teamText = teamText;
    this.teleGridHeader = teleGridHeader;
    this.teleGridLayout = teleGridLayout;
    this.teleHeader = teleHeader;
    this.teleopLayout = teleopLayout;
    this.teleopText = teleopText;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RecyclerItemGridBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RecyclerItemGridBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.recycler_item_grid, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RecyclerItemGridBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Autogrid_header;
      TextView AutogridHeader = ViewBindings.findChildViewById(rootView, id);
      if (AutogridHeader == null) {
        break missingId;
      }

      id = R.id.CAgrid_text;
      TextView CAgridText = ViewBindings.findChildViewById(rootView, id);
      if (CAgridText == null) {
        break missingId;
      }

      id = R.id.CTgrid_text;
      TextView CTgridText = ViewBindings.findChildViewById(rootView, id);
      if (CTgridText == null) {
        break missingId;
      }

      id = R.id.LAgrid_text;
      TextView LAgridText = ViewBindings.findChildViewById(rootView, id);
      if (LAgridText == null) {
        break missingId;
      }

      id = R.id.LTgrid_text;
      TextView LTgridText = ViewBindings.findChildViewById(rootView, id);
      if (LTgridText == null) {
        break missingId;
      }

      id = R.id.RAgrid_text;
      TextView RAgridText = ViewBindings.findChildViewById(rootView, id);
      if (RAgridText == null) {
        break missingId;
      }

      id = R.id.RTgrid_text;
      TextView RTgridText = ViewBindings.findChildViewById(rootView, id);
      if (RTgridText == null) {
        break missingId;
      }

      id = R.id.allianceText;
      TextView allianceText = ViewBindings.findChildViewById(rootView, id);
      if (allianceText == null) {
        break missingId;
      }

      id = R.id.autoGrid_layout;
      RelativeLayout autoGridLayout = ViewBindings.findChildViewById(rootView, id);
      if (autoGridLayout == null) {
        break missingId;
      }

      id = R.id.autoc_header;
      TextView autocHeader = ViewBindings.findChildViewById(rootView, id);
      if (autocHeader == null) {
        break missingId;
      }

      id = R.id.autoc_layout;
      RelativeLayout autocLayout = ViewBindings.findChildViewById(rootView, id);
      if (autocLayout == null) {
        break missingId;
      }

      id = R.id.autoc_text;
      TextView autocText = ViewBindings.findChildViewById(rootView, id);
      if (autocText == null) {
        break missingId;
      }

      id = R.id.defense2;
      TextView defense2 = ViewBindings.findChildViewById(rootView, id);
      if (defense2 == null) {
        break missingId;
      }

      id = R.id.defense3;
      TextView defense3 = ViewBindings.findChildViewById(rootView, id);
      if (defense3 == null) {
        break missingId;
      }

      id = R.id.dock_header;
      TextView dockHeader = ViewBindings.findChildViewById(rootView, id);
      if (dockHeader == null) {
        break missingId;
      }

      id = R.id.dock_layout;
      RelativeLayout dockLayout = ViewBindings.findChildViewById(rootView, id);
      if (dockLayout == null) {
        break missingId;
      }

      id = R.id.dock_layout_linear;
      LinearLayout dockLayoutLinear = ViewBindings.findChildViewById(rootView, id);
      if (dockLayoutLinear == null) {
        break missingId;
      }

      id = R.id.dockTime_header;
      TextView dockTimeHeader = ViewBindings.findChildViewById(rootView, id);
      if (dockTimeHeader == null) {
        break missingId;
      }

      id = R.id.dockTime_layout;
      RelativeLayout dockTimeLayout = ViewBindings.findChildViewById(rootView, id);
      if (dockTimeLayout == null) {
        break missingId;
      }

      id = R.id.dockTime_layout_linear;
      LinearLayout dockTimeLayoutLinear = ViewBindings.findChildViewById(rootView, id);
      if (dockTimeLayoutLinear == null) {
        break missingId;
      }

      id = R.id.dockTime_text;
      TextView dockTimeText = ViewBindings.findChildViewById(rootView, id);
      if (dockTimeText == null) {
        break missingId;
      }

      id = R.id.docking_text;
      TextView dockingText = ViewBindings.findChildViewById(rootView, id);
      if (dockingText == null) {
        break missingId;
      }

      id = R.id.event_header;
      TextView eventHeader = ViewBindings.findChildViewById(rootView, id);
      if (eventHeader == null) {
        break missingId;
      }

      id = R.id.event_layout;
      RelativeLayout eventLayout = ViewBindings.findChildViewById(rootView, id);
      if (eventLayout == null) {
        break missingId;
      }

      id = R.id.event_text;
      TextView eventText = ViewBindings.findChildViewById(rootView, id);
      if (eventText == null) {
        break missingId;
      }

      id = R.id.layoutGrid1;
      LinearLayout layoutGrid1 = ViewBindings.findChildViewById(rootView, id);
      if (layoutGrid1 == null) {
        break missingId;
      }

      id = R.id.layoutGrid2;
      LinearLayout layoutGrid2 = ViewBindings.findChildViewById(rootView, id);
      if (layoutGrid2 == null) {
        break missingId;
      }

      id = R.id.match_header;
      TextView matchHeader = ViewBindings.findChildViewById(rootView, id);
      if (matchHeader == null) {
        break missingId;
      }

      id = R.id.match_layout;
      RelativeLayout matchLayout = ViewBindings.findChildViewById(rootView, id);
      if (matchLayout == null) {
        break missingId;
      }

      id = R.id.match_text;
      TextView matchText = ViewBindings.findChildViewById(rootView, id);
      if (matchText == null) {
        break missingId;
      }

      id = R.id.offence2;
      TextView offence2 = ViewBindings.findChildViewById(rootView, id);
      if (offence2 == null) {
        break missingId;
      }

      id = R.id.offence3;
      TextView offence3 = ViewBindings.findChildViewById(rootView, id);
      if (offence3 == null) {
        break missingId;
      }

      id = R.id.point_header;
      TextView pointHeader = ViewBindings.findChildViewById(rootView, id);
      if (pointHeader == null) {
        break missingId;
      }

      id = R.id.point_layout;
      RelativeLayout pointLayout = ViewBindings.findChildViewById(rootView, id);
      if (pointLayout == null) {
        break missingId;
      }

      id = R.id.point_text;
      TextView pointText = ViewBindings.findChildViewById(rootView, id);
      if (pointText == null) {
        break missingId;
      }

      id = R.id.team_header;
      TextView teamHeader = ViewBindings.findChildViewById(rootView, id);
      if (teamHeader == null) {
        break missingId;
      }

      id = R.id.team_layout;
      RelativeLayout teamLayout = ViewBindings.findChildViewById(rootView, id);
      if (teamLayout == null) {
        break missingId;
      }

      id = R.id.team_layoutTeams;
      LinearLayout teamLayoutTeams = ViewBindings.findChildViewById(rootView, id);
      if (teamLayoutTeams == null) {
        break missingId;
      }

      id = R.id.teamNum2;
      TextView teamNum2 = ViewBindings.findChildViewById(rootView, id);
      if (teamNum2 == null) {
        break missingId;
      }

      id = R.id.teamNum3;
      TextView teamNum3 = ViewBindings.findChildViewById(rootView, id);
      if (teamNum3 == null) {
        break missingId;
      }

      id = R.id.team_text;
      TextView teamText = ViewBindings.findChildViewById(rootView, id);
      if (teamText == null) {
        break missingId;
      }

      id = R.id.teleGrid_header;
      TextView teleGridHeader = ViewBindings.findChildViewById(rootView, id);
      if (teleGridHeader == null) {
        break missingId;
      }

      id = R.id.teleGrid_layout;
      RelativeLayout teleGridLayout = ViewBindings.findChildViewById(rootView, id);
      if (teleGridLayout == null) {
        break missingId;
      }

      id = R.id.tele_header;
      TextView teleHeader = ViewBindings.findChildViewById(rootView, id);
      if (teleHeader == null) {
        break missingId;
      }

      id = R.id.teleop_layout;
      RelativeLayout teleopLayout = ViewBindings.findChildViewById(rootView, id);
      if (teleopLayout == null) {
        break missingId;
      }

      id = R.id.teleop_text;
      TextView teleopText = ViewBindings.findChildViewById(rootView, id);
      if (teleopText == null) {
        break missingId;
      }

      return new RecyclerItemGridBinding((RelativeLayout) rootView, AutogridHeader, CAgridText,
          CTgridText, LAgridText, LTgridText, RAgridText, RTgridText, allianceText, autoGridLayout,
          autocHeader, autocLayout, autocText, defense2, defense3, dockHeader, dockLayout,
          dockLayoutLinear, dockTimeHeader, dockTimeLayout, dockTimeLayoutLinear, dockTimeText,
          dockingText, eventHeader, eventLayout, eventText, layoutGrid1, layoutGrid2, matchHeader,
          matchLayout, matchText, offence2, offence3, pointHeader, pointLayout, pointText,
          teamHeader, teamLayout, teamLayoutTeams, teamNum2, teamNum3, teamText, teleGridHeader,
          teleGridLayout, teleHeader, teleopLayout, teleopText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
