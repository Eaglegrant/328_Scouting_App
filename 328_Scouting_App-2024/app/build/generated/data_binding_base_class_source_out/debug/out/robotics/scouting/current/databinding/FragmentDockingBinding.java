// Generated by view binder compiler. Do not edit!
package robotics.scouting.current.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import robotics.scouting.current.R;

public final class FragmentDockingBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnCalculatePoints;

  @NonNull
  public final CheckBox checkboxHang;

  @NonNull
  public final CheckBox checkboxHarmony;

  @NonNull
  public final CheckBox checkboxSpot;

  @NonNull
  public final CheckBox checkboxTrap;

  @NonNull
  public final EditText editTextNumberPoints;

  @NonNull
  public final TextView textView2;

  private FragmentDockingBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button btnCalculatePoints, @NonNull CheckBox checkboxHang,
      @NonNull CheckBox checkboxHarmony, @NonNull CheckBox checkboxSpot,
      @NonNull CheckBox checkboxTrap, @NonNull EditText editTextNumberPoints,
      @NonNull TextView textView2) {
    this.rootView = rootView;
    this.btnCalculatePoints = btnCalculatePoints;
    this.checkboxHang = checkboxHang;
    this.checkboxHarmony = checkboxHarmony;
    this.checkboxSpot = checkboxSpot;
    this.checkboxTrap = checkboxTrap;
    this.editTextNumberPoints = editTextNumberPoints;
    this.textView2 = textView2;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentDockingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentDockingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_docking, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentDockingBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnCalculatePoints;
      Button btnCalculatePoints = ViewBindings.findChildViewById(rootView, id);
      if (btnCalculatePoints == null) {
        break missingId;
      }

      id = R.id.checkbox_hang;
      CheckBox checkboxHang = ViewBindings.findChildViewById(rootView, id);
      if (checkboxHang == null) {
        break missingId;
      }

      id = R.id.checkbox_harmony;
      CheckBox checkboxHarmony = ViewBindings.findChildViewById(rootView, id);
      if (checkboxHarmony == null) {
        break missingId;
      }

      id = R.id.checkbox_spot;
      CheckBox checkboxSpot = ViewBindings.findChildViewById(rootView, id);
      if (checkboxSpot == null) {
        break missingId;
      }

      id = R.id.checkbox_trap;
      CheckBox checkboxTrap = ViewBindings.findChildViewById(rootView, id);
      if (checkboxTrap == null) {
        break missingId;
      }

      id = R.id.editTextNumberPoints;
      EditText editTextNumberPoints = ViewBindings.findChildViewById(rootView, id);
      if (editTextNumberPoints == null) {
        break missingId;
      }

      id = R.id.textView2;
      TextView textView2 = ViewBindings.findChildViewById(rootView, id);
      if (textView2 == null) {
        break missingId;
      }

      return new FragmentDockingBinding((ConstraintLayout) rootView, btnCalculatePoints,
          checkboxHang, checkboxHarmony, checkboxSpot, checkboxTrap, editTextNumberPoints,
          textView2);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
